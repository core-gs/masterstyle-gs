//https://cdn.jsdelivr.net/gh/core-gs/masterstyle-gs@latest/v6-ghl-loader.min.js
//https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css



// GHL Loader (strict, id-only)
// - Works ONLY if current /v2/location/:id exists AND a <link data-ghl-id="id"> is present
// - Adds 'loc-<id>' to <html> and to any element that already has raw <id> as class
// - Fetches stable theme (user-d-custom-theme.css) and scopes .__USER__ -> .loc-<id>
// - Promotes ONLY the matching <link data-ghl-id="id"> to stylesheet
// - No blank/global fallback, no other CSS is touched/loaded

(function () {
  if (window.__GHL_LOADER__) return;
  window.__GHL_LOADER__ = true;

  var DEFAULT_TEMPLATE_URL = "https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css";

  function currentScript() {
    return document.currentScript || (function () {
      var s = document.getElementsByTagName("script");
      return s[s.length - 1] || null;
    })();
  }

  function getRouteId() {
    var m = location.href.match(/\/v2\/location\/([^\/\?#]+)/);
    return m ? m[1] : null;
  }

  function scopeClass(id) { return "loc-" + id; }

  // Add 'loc-<id>' to <html> and to any element that already has the raw id as class
  function attachScopeClasses(id) {
    if (!id) return;
    var cls = scopeClass(id);

    // <html>
    document.documentElement.classList.add(cls);

    // Any element with the raw id as a class
    try {
      var nodes = document.getElementsByClassName(id);
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.classList && !node.classList.contains(cls)) {
          node.classList.add(cls);
        }
      }
    } catch (_) {
      // no-op
    }
  }

  function promotePreload(node) {
    if (!node) return null;
    var href = node.getAttribute("href");
    if (!href) return null;
    if (document.querySelector('link[rel="stylesheet"][href="' + href + '"]')) return null;
    var l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    document.head.appendChild(l);
    node.setAttribute("data-activated", "true");
    return l;
  }

  function findExactEntry(id) {
    if (!id) return null;
    return document.querySelector('link[data-ghl-id="' + id + '"]');
  }

  // Fetch stable theme and scope it: .__USER__ -> .loc-<id>
  function loadStableTheme(id, templateURL) {
    if (!id) return;
    if (document.querySelector('link[data-user-theme-loaded="' + id + '"]')) return;

    fetch(templateURL, { cache: "no-store", mode: "cors" })
      .then(function (r) {
        if (!r.ok) throw new Error("template fetch " + r.status);
        return r.text();
      })
      .then(function (css) {
        var out = css.replace(/\.?__USER__\b/g, "." + scopeClass(id));
        var blob = new Blob([out], { type: "text/css" });
        var href = URL.createObjectURL(blob);
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href;
        link.setAttribute("data-user-theme-loaded", id);
        document.head.appendChild(link);

        link.addEventListener("load", function () {
          setTimeout(function () {
            try { URL.revokeObjectURL(href); } catch (e) {}
          }, 1500);
        });
      })
      .catch(function (err) {
        console.warn("[GHL Loader] Stable theme template fetch failed:", err && err.message);
      });
  }

  function applyForId(id) {
    // Must have exact entry; otherwise do NOTHING
    var entry = findExactEntry(id);
    if (!entry) return false;

    // Scope classes
    attachScopeClasses(id);

    // Stable theme first, then dynamic CSS
    var cs = currentScript();
    var templateURL = (cs && cs.getAttribute("data-template")) || DEFAULT_TEMPLATE_URL;

    loadStableTheme(id, templateURL);
    promotePreload(entry);
    return true;
  }

  function start() {
    // always auto: wait for route id up to 10s. If not found or not listed, do nothing.
    var t0 = Date.now();
    var timer = setInterval(function () {
      var id = getRouteId();
      if (id) {
        clearInterval(timer);
        applyForId(id); // if no matching <link>, nothing happens
      } else if (Date.now() - t0 > 10000) {
        clearInterval(timer);
        // strict: no id -> do nothing
      }
    }, 120);
  }

  if (document.readyState !== "loading") start();
  else document.addEventListener("DOMContentLoaded", start);
})();
