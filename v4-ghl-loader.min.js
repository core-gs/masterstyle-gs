//https://cdn.jsdelivr.net/gh/core-gs/masterstyle-gs@latest/v4-ghl-loader.min.js
//https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css



// GHL Loader (unified, strict+fallback)
// - Fetches stable theme (user-d-custom-theme.css) and scopes `.__USER__` -> `.loc-<id>` (or removes for blank)
// - Promotes the correct manual <link data-ghl-id="..."> to stylesheet
// - Adds `loc-<id>` to <html> AND to any element that already has the raw id as a class
// - Fallback: if no exact id match, but `blank` entry exists, use blank
// - In non-location pages, after timeout, will apply `blank` if present

(function () {
  if (window.__GHL_LOADER__) return;
  window.__GHL_LOADER__ = true;

  var DEFAULT_TEMPLATE_URL = "https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css";

  function currentScript() {
    return document.currentScript || (function () {
      var s = document.getElementsByTagName("script");
      return s[s.length - 1] || null;
    })();
  }

  function getRouteId() {
    var m = location.href.match(/\/v2\/location\/([^\/\?#]+)/);
    return m ? m[1] : null;
  }

  function scopeClass(id) { return "loc-" + id; }

  // Add .loc-<id> to <html> and to any element that already has the raw id class (GHL puts raw id on a container)
  function attachScopeClasses(id) {
    if (!id || id === "blank") return;
    var cls = scopeClass(id);

    // <html>
    document.documentElement.classList.add(cls);

    // Any element with the raw id as a class (use getElementsByClassName to support digit-start)
    try {
      var nodes = document.getElementsByClassName(id);
      for (var i = 0; i < nodes.length; i++) {
        nodes[i].classList.add(cls);
      }
    } catch (_) {
      // no-op
    }
  }

  function promotePreload(node) {
    if (!node) return null;
    var href = node.getAttribute("href");
    if (!href) return null;
    if (document.querySelector('link[rel="stylesheet"][href="' + href + '"]')) return null;
    var l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    document.head.appendChild(l);
    node.setAttribute("data-activated", "true");
    return l;
  }

  // Find exact id entry
  function findExactEntry(id) {
    if (!id) return null;
    return document.querySelector('link[data-ghl-id="' + id + '"]');
  }

  // Find blank entry
  function findBlankEntry() {
    return document.querySelector('link[data-ghl-id="blank"]');
  }

  // Fetch stable theme and scope it
  function loadStableTheme(idOrBlank, templateURL) {
    var key = idOrBlank || "blank";
    if (document.querySelector('link[data-user-theme-loaded="' + key + '"]')) return;

    fetch(templateURL, { cache: "no-store", mode: "cors" })
      .then(function (r) {
        if (!r.ok) throw new Error("template fetch " + r.status);
        return r.text();
      })
      .then(function (css) {
        var out = (key === "blank")
          ? css.replace(/\.?__USER__\b/g, "")
          : css.replace(/\.?__USER__\b/g, "." + scopeClass(key));

        var blob = new Blob([out], { type: "text/css" });
        var href = URL.createObjectURL(blob);
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href;
        link.setAttribute("data-user-theme-loaded", key);
        document.head.appendChild(link);

        link.addEventListener("load", function () {
          setTimeout(function () {
            try { URL.revokeObjectURL(href); } catch (e) {}
          }, 1500);
        });
      })
      .catch(function (err) {
        console.warn("[GHL Loader] Stable theme template fetch failed:", err && err.message);
      });
  }

  function applyWithKey(key) {
    // key is either exact id or "blank"
    // must have a matching manual entry, otherwise do nothing
    var entry = key === "blank" ? findBlankEntry() : findExactEntry(key);
    if (!entry) return false;

    // Scope classes
    attachScopeClasses(key);

    // Stable theme first, then dynamic vars CSS
    var cs = currentScript();
    var templateURL = (cs && cs.getAttribute("data-template")) || DEFAULT_TEMPLATE_URL;

    loadStableTheme(key, templateURL);
    promotePreload(entry);
    return true;
  }

  function start() {
    var cs = currentScript();
    var scopeMode = (cs && cs.getAttribute("data-scope")) || "auto"; // always "auto" as per your requirement

    // AUTO mode: wait up to 10s for route id; prefer exact id; else blank if present
    var t0 = Date.now();
    var timer = setInterval(function () {
      var id = getRouteId();
      if (id) {
        clearInterval(timer);
        // Try exact id
        if (!applyWithKey(id)) {
          // If no exact, but blank exists, apply blank
          applyWithKey("blank");
        }
      } else if (Date.now() - t0 > 10000) {
        clearInterval(timer);
        // No id visible (non-location view) -> try blank (if present)
        applyWithKey("blank");
      }
    }, 120);
  }

  if (document.readyState !== "loading") start();
  else document.addEventListener("DOMContentLoaded", start);
})();
