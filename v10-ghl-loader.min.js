//https://cdn.jsdelivr.net/gh/core-gs/masterstyle-gs@latest/v10-ghl-loader.min.js
//https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css


// GHL Loader (all-in-one: SPA-aware + cache-first + visual loader + strict matching)
// - Detects SPA route changes (/v2/location/:id) and swaps styles w/o reload
// - Stable theme (user-d-custom-theme.css): cache-first inline, then blob
// - Per-ID dynamic CSS: promote matching <link data-ghl-id="...">
// - Scope classes: adds/removes loc-<id> on <html> and raw-id containers; watches late mounts
// - Visual blur/shimmer overlay built-in (no extra script); auto-hides on apply
// - Dispatches window "ghl:applied" when styles applied
// - Exact id first; else "blank" if present; else noop

(function () {
  if (window.__GHL_LOADER__) return;
  window.__GHL_LOADER__ = true;

  // ---------- Tunables ----------
  var DEFAULT_TEMPLATE_URL = "https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css";
  var GUARD_TIMEOUT_MS = 3000;      // max time to keep guard/overlay
  var WATCH_SCOPE_MS   = 15000;     // watch duration for late mounts
  var ROUTE_WAIT_MS    = 10000;     // initial wait for id
  var STORAGE_KEY      = "GHL_THEME_CACHE::"; // localStorage prefix

  // ---------- State ----------
  var STATE = {
    currentKey: null,         // 'blank' or locationId
    lastHref: location.href,  // SPA url watcher
    ensureWatchers: {},       // id -> MutationObserver
    appliedKeySet: new Set(), // already inlined theme keys
    guardEl: null,            // style guard element
    overlayEl: null,          // visual loader overlay element
    overlayKillTimer: null    // overlay failsafe timer
  };

  // ---------- Utilities ----------
  function currentScript() {
    return document.currentScript || (function () {
      var s = document.getElementsByTagName("script");
      return s[s.length - 1] || null;
    })();
  }
  function getRouteId() {
    var m = location.href.match(/\/v2\/location\/([^\/\?#]+)/);
    return m ? m[1] : null;
  }
  function scopeClass(id) { return "loc-" + id; }
  function cacheKey(templateURL, key) { return STORAGE_KEY + templateURL + "::" + key; }

  // ---------- Visual Loader (blur + shimmer) ----------
  function injectVisualStyles() {
    if (document.getElementById("ghl-vloader-style")) return;
    var css = `
      .ghl-vloader__overlay {
        position: fixed; inset: 0; z-index: 2147483000;
        display: grid; place-items: center;
        backdrop-filter: blur(6px);
        background: rgba(255,255,255,0.35);
        transition: opacity .18s ease-out, visibility .18s ease-out;
      }
      .ghl-vloader__hidden { opacity:0; visibility:hidden; pointer-events:none; }
      .ghl-vloader__card {
        min-width: 180px; max-width: min(90vw, 320px);
        padding: 16px 18px; border-radius: 14px;
        background: rgba(255,255,255,0.85);
        box-shadow: 0 10px 30px rgba(0,0,0,0.10);
        -webkit-backdrop-filter: blur(8px); backdrop-filter: blur(8px);
      }
      .ghl-vloader__rows { display:grid; gap:10px; margin-bottom:12px; }
      .ghl-vloader__row { height:10px; border-radius:999px; background:#eef2f7; }
      .ghl-vloader__row:nth-child(2){ width:85% }
      .ghl-vloader__row:nth-child(3){ width:70% }
      .ghl-vloader__shimmer {
        height:10px; border-radius:999px; position:relative; overflow:hidden; background:#e9eef3;
      }
      .ghl-vloader__shimmer::before {
        content:""; position:absolute; inset:0; transform:translateX(-100%);
        background: linear-gradient(90deg,
          rgba(233,238,243,0) 0%,
          rgba(233,238,243,0.0) 20%,
          rgba(255,255,255,0.9) 50%,
          rgba(233,238,243,0.0) 80%,
          rgba(233,238,243,0) 100%);
        animation: ghl-vloader-slide 900ms infinite;
      }
      @keyframes ghl-vloader-slide { 0%{ transform: translateX(-100%);} 100%{ transform: translateX(100%);} }

      /* Guard: reduce flash before apply */
      html:not(.ghl-applied) .hl_header, html:not(.ghl-applied) #sidebar-v2 { visibility:hidden !important }
      html:not(.ghl-applied) #dashboard-wrapper{ opacity:0.001 !important }
    `;
    var st = document.createElement("style");
    st.id = "ghl-vloader-style";
    st.textContent = css;
    document.head.appendChild(st);
  }
  function showOverlay() {
    if (STATE.overlayEl) return;
    injectVisualStyles();
    var el = document.createElement("div");
    el.className = "ghl-vloader__overlay";
    el.innerHTML = `
      <div class="ghl-vloader__card" role="status" aria-live="polite" aria-label="Loading">
        <div class="ghl-vloader__rows">
          <div class="ghl-vloader__row"></div>
          <div class="ghl-vloader__row"></div>
          <div class="ghl-vloader__row"></div>
        </div>
        <div class="ghl-vloader__shimmer"></div>
      </div>`;
    document.body.appendChild(el);
    STATE.overlayEl = el;
    // failsafe
    STATE.overlayKillTimer = setTimeout(hideOverlay, GUARD_TIMEOUT_MS);
  }
  function hideOverlay() {
    if (!STATE.overlayEl) return;
    if (STATE.overlayKillTimer) { clearTimeout(STATE.overlayKillTimer); STATE.overlayKillTimer = null; }
    STATE.overlayEl.classList.add("ghl-vloader__hidden");
    setTimeout(function () {
      if (STATE.overlayEl && STATE.overlayEl.parentNode) STATE.overlayEl.parentNode.removeChild(STATE.overlayEl);
      STATE.overlayEl = null;
    }, 180);
  }

  // ---------- Guard (also controls .ghl-applied) ----------
  function installGuard() {
    document.documentElement.classList.remove("ghl-applied"); // ensure guard conditions active
    showOverlay(); // visual loader on
  }
  function removeGuard() {
    // remove visual overlay
    hideOverlay();
    // mark applied (also unlocks guard CSS)
    document.documentElement.classList.add("ghl-applied");
    try { window.dispatchEvent(new Event("ghl:applied")); } catch (_) {}
  }
  function markAppliedSoon() {
    setTimeout(removeGuard, 30);
    try { window.dispatchEvent(new Event("ghl:applied")); } catch (_) {}
  }

  // ---------- Preconnect / fetch priority ----------
  function boostFetchPriority() {
    try {
      var pc = document.createElement("link");
      pc.rel = "preconnect";
      pc.href = "https://cdn.jsdelivr.net";
      document.head.appendChild(pc);
    } catch(_) {}
    try {
      var links = document.querySelectorAll('link[data-ghl-id]');
      links.forEach(function (n) {
        if (!n.getAttribute("fetchpriority")) n.setAttribute("fetchpriority", "high");
        if (n.rel !== "preload") { n.rel = "preload"; n.as = "style"; }
      });
    } catch(_) {}
  }

  // ---------- Scope classes ----------
  function attachScopeClasses(id) {
    if (!id || id === "blank") return;
    var cls = scopeClass(id);
    document.documentElement.classList.add(cls);
    try {
      var nodes = document.getElementsByClassName(id);
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.classList && !node.classList.contains(cls)) node.classList.add(cls);
      }
    } catch (_) {}
  }
  function detachScopeClasses(id) {
    if (!id || id === "blank") return;
    var cls = scopeClass(id);
    document.documentElement.classList.remove(cls);
    try {
      var list = document.getElementsByClassName(cls), arr = [];
      for (var i = 0; i < list.length; i++) arr.push(list[i]);
      for (var j = 0; j < arr.length; j++) {
        var el = arr[j];
        if (el.classList) el.classList.remove(cls);
      }
    } catch (_) {}
  }
  function watchAndEnsureScope(id) {
    if (!id || id === "blank") return;
    if (STATE.ensureWatchers[id]) return;
    var cls = scopeClass(id);
    var start = Date.now();

    attachScopeClasses(id);

    var mo = new MutationObserver(function (muts) {
      for (var k = 0; k < muts.length; k++) {
        var m = muts[k];

        if (m.type === "childList") {
          for (var j = 0; j < m.addedNodes.length; j++) {
            var n = m.addedNodes[j];
            if (n && n.nodeType === 1) {
              if (n.classList && n.classList.contains(id) && !n.classList.contains(cls)) n.classList.add(cls);
              if (n.getElementsByClassName) {
                var list = n.getElementsByClassName(id);
                for (var x = 0; x < list.length; x++) {
                  var el = list[x];
                  if (el.classList && !el.classList.contains(cls)) el.classList.add(cls);
                }
              }
            }
          }
        }

        if (m.type === "attributes" && m.attributeName === "class") {
          var el2 = m.target;
          if (el2 && el2.classList && el2.classList.contains(id) && !el2.classList.contains(cls)) el2.classList.add(cls);
        }
      }
      if (Date.now() - start > WATCH_SCOPE_MS) {
        try { mo.disconnect(); } catch (_) {}
        delete STATE.ensureWatchers[id];
      }
    });

    try {
      mo.observe(document.documentElement, { subtree: true, childList: true, attributes: true, attributeFilter: ["class"] });
      STATE.ensureWatchers[id] = mo;
    } catch(_) {}
  }

  // ---------- Manual entries ----------
  function findExactEntry(id) { return id ? document.querySelector('link[data-ghl-id="' + id + '"]') : null; }
  function findBlankEntry()   { return document.querySelector('link[data-ghl-id="blank"]'); }

  // ---------- Dynamic stylesheet promotion / cleanup ----------
  function promotePreload(entry, key) {
    if (!entry) return null;
    var href = entry.getAttribute("href");
    if (!href) return null;
    var existing = document.querySelector('link[rel="stylesheet"][data-ghl-style-for="'+ key +'"]');
    if (existing && existing.getAttribute('href') === href) return existing;

    cleanupPromotedStylesExcept(null); // remove all to avoid conflicts

    var l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    l.setAttribute("data-ghl-style-for", key);
    l.onload = markAppliedSoon;
    document.head.appendChild(l);
    entry.setAttribute("data-activated", "true");
    return l;
  }
  function cleanupPromotedStylesExcept(keepKey) {
    var promoted = document.querySelectorAll('link[rel="stylesheet"][data-ghl-style-for]');
    for (var i = 0; i < promoted.length; i++) {
      var n = promoted[i];
      if (!keepKey || n.getAttribute("data-ghl-style-for") !== keepKey) {
        n.parentNode && n.parentNode.removeChild(n);
      }
    }
  }

  // ---------- Stable theme: cache-first inline, then network blob ----------
  function injectInlineStable(key, css) {
    if (STATE.appliedKeySet.has(key)) return; // already inlined
    var st = document.createElement("style");
    st.type = "text/css";
    st.setAttribute("data-user-theme-inline", key);
    st.textContent = css;
    document.head.appendChild(st);
    STATE.appliedKeySet.add(key);
    markAppliedSoon();
  }
  function removeInlineStableNotKey(keepKey) {
    var list = document.querySelectorAll('style[data-user-theme-inline]');
    for (var i = 0; i < list.length; i++) {
      var n = list[i];
      if (n.getAttribute("data-user-theme-inline") !== keepKey) {
        n.parentNode && n.parentNode.removeChild(n);
      }
    }
  }
  function loadStableThemeFast(key, templateURL) {
    var storageId = cacheKey(templateURL, key);
    // Cache-first inline
    try {
      var cached = localStorage.getItem(storageId);
      if (cached) injectInlineStable(key, cached);
    } catch(_) {}

    // Skip if blob already present
    if (document.querySelector('link[data-user-theme-loaded="' + key + '"]')) return;

    // Fetch latest & inject blob, replace inline
    fetch(templateURL, { cache: "default", mode: "cors" })
      .then(function (r) {
        if (!r.ok) throw new Error("template fetch " + r.status);
        return r.text();
      })
      .then(function (css) {
        var processed = (key === "blank")
          ? css.replace(/\.?__USER__\b/g, "")
          : css.replace(/\.?__USER__\b/g, "." + scopeClass(key));

        try { localStorage.setItem(storageId, processed); } catch(_) {}

        var blob = new Blob([processed], { type: "text/css" });
        var href = URL.createObjectURL(blob);
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href;
        link.setAttribute("data-user-theme-loaded", key);
        link.onload = markAppliedSoon;
        document.head.appendChild(link);

        link.addEventListener("load", function () {
          setTimeout(function () {
            try { URL.revokeObjectURL(href); } catch (e) {}
            removeInlineStableNotKey(key);
          }, 300);
        });
      })
      .catch(function (err) {
        console.warn("[GHL Loader] Stable theme template fetch failed:", err && err.message);
      });
  }

  // ---------- Apply / Swap ----------
  function applyWithKey(key) {
    var entry = key === "blank" ? findBlankEntry() : findExactEntry(key);
    if (!entry) return false;

    if (STATE.currentKey === key) {
      attachScopeClasses(key);
      watchAndEnsureScope(key);
      return true;
    }

    // Install visual guard to mask flashes during swap
    installGuard();

    // Cleanup previous
    var prev = STATE.currentKey;
    if (prev && prev !== key) {
      detachScopeClasses(prev);
      cleanupPromotedStylesExcept(null);
      removeInlineStableNotKey(key);
      var themes = document.querySelectorAll('link[data-user-theme-loaded]');
      themes.forEach(function (t) { t.parentNode && t.parentNode.removeChild(t); });
    }

    // Apply new
    attachScopeClasses(key);
    watchAndEnsureScope(key);

    var cs = currentScript();
    var templateURL = (cs && cs.getAttribute("data-template")) || DEFAULT_TEMPLATE_URL;

    boostFetchPriority();
    loadStableThemeFast(key, templateURL);
    promotePreload(entry, key);

    STATE.currentKey = key;
    return true;
  }

  function chooseAndApplyForCurrentRoute() {
    var id = getRouteId();
    if (id) { if (!applyWithKey(id)) applyWithKey("blank"); }
    else { applyWithKey("blank"); }
  }

  // ---------- SPA route detection ----------
  function installRouteWatchers() {
    var _push = history.pushState, _replace = history.replaceState;
    function handleUrlChange() {
      if (STATE.lastHref !== location.href) {
        STATE.lastHref = location.href;
        setTimeout(chooseAndApplyForCurrentRoute, 30);
      }
    }
    try {
      history.pushState = function () { var r = _push.apply(this, arguments); handleUrlChange(); return r; };
      history.replaceState = function () { var r = _replace.apply(this, arguments); handleUrlChange(); return r; };
    } catch(_) {}
    window.addEventListener('popstate', handleUrlChange);
    setInterval(handleUrlChange, 300);
  }

  // ---------- Boot ----------
  function start() {
    installRouteWatchers();
    boostFetchPriority();

    var t0 = Date.now();
    var timer = setInterval(function () {
      var id = getRouteId();
      if (id || Date.now() - t0 > ROUTE_WAIT_MS) {
        clearInterval(timer);
        chooseAndApplyForCurrentRoute();
      }
    }, 80);
  }

  if (document.readyState !== "loading") start();
  else document.addEventListener("DOMContentLoaded", start);

})();
