//https://cdn.jsdelivr.net/gh/core-gs/masterstyle-gs@latest/v1-ghl-loader.min.js
//https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css


// GHL Loader - loads stable theme (with __USER__ scope) + activates per-ID dynamic CSS
// Place at: public/assets/js/ghl-loader.js

(function () {
  // Prevent double-run
  if (window.__GHL_LOADER__) return;
  window.__GHL_LOADER__ = true;

  // ---- Config ----
  var TEMPLATE_URL = "https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css";

  // Detect current <script> (for data-scope="auto|blank")
  function currentScript() {
    return document.currentScript || (function () {
      var s = document.getElementsByTagName("script");
      return s[s.length - 1] || null;
    })();
  }

  // Extract GHL location id from URL (/v2/location/{id})
  function getRouteId() {
    var m = location.href.match(/\/v2\/location\/([^\/\?#]+)/);
    return m ? m[1] : null;
  }

  // Digit-safe scope class (avoid invalid ".7abc" selector)
  function scopeClass(id) { return "loc-" + id; }

  // Promote a <link rel="preload" as="style" ...> to stylesheet (create dedicated <link>)
  function promotePreloadToStylesheet(node) {
    if (!node) return null;
    var href = node.getAttribute("href");
    if (!href) return null;
    // Prevent duplicates
    var exist = document.querySelector('link[rel="stylesheet"][href="' + href + '"]');
    if (exist) return exist;

    var l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    node.setAttribute("data-activated", "true");
    document.head.appendChild(l);
    return l;
  }

  // Activate one CSS from the manual list (prefer exact id, else global/blank)
  function activateManualListCSS(idOrBlank) {
    var links = document.querySelectorAll('link[data-ghl-id], link[data-ghl-global]');
    var match = null;

    if (idOrBlank && idOrBlank !== "blank") {
      match = Array.prototype.find.call(links, function (n) {
        return n.getAttribute("data-ghl-id") === idOrBlank;
      });
    }
    if (!match) {
      match = Array.prototype.find.call(links, function (n) {
        return n.hasAttribute("data-ghl-global") || n.getAttribute("data-ghl-id") === "blank";
      });
    }
    if (match) promotePreloadToStylesheet(match);
  }

  // Load stable theme from TEMPLATE_URL and scope it:
  //  - id === "blank"  -> remove __USER__ (global)
  //  - else            -> replace __USER__ -> .loc-<id>
  function loadStableTheme(idOrBlank) {
    // guard: inject once per location
    if (document.querySelector('link[data-user-theme-loaded="' + idOrBlank + '"]')) return;

    fetch(TEMPLATE_URL, { cache: "no-store" })
      .then(function (r) { if (!r.ok) throw 0; return r.text(); })
      .then(function (css) {
        var out;
        if (idOrBlank === "blank") {
          // remove the token, both ".__USER__" and "__USER__" standalone (safer)
          out = css.replace(/\.?__USER__\b/g, "");
        } else {
          out = css.replace(/\.?__USER__\b/g, "." + scopeClass(idOrBlank));
        }
        var blob = new Blob([out], { type: "text/css" });
        var href = URL.createObjectURL(blob);

        var l = document.createElement("link");
        l.rel = "stylesheet";
        l.href = href;
        l.setAttribute("data-user-theme-loaded", idOrBlank);
        document.head.appendChild(l);

        // free object URL later
        l.addEventListener("load", function () {
          setTimeout(function () {
            try { URL.revokeObjectURL(href); } catch (e) {}
          }, 1500);
        });
      })
      .catch(function () {
        // fail silently; at worst dynamic per-ID CSS still applies
      });
  }

  // Main apply sequence (stable theme first, then dynamic)
  function applyFor(idOrBlank) {
    // Add digit-safe scope class to <html> (optional but recommended)
    if (idOrBlank && idOrBlank !== "blank") {
      document.documentElement.classList.add(scopeClass(idOrBlank));
    }

    // 1) Load stable themed CSS (scoped)
    loadStableTheme(idOrBlank);

    // 2) Activate the matching dynamic CSS from manual list
    activateManualListCSS(idOrBlank);
  }

  // Start (handles SPA route wait)
  function start() {
    var cs = currentScript();
    var scopeMode = (cs && cs.getAttribute("data-scope")) || "auto"; // "auto" | "blank"

    if (scopeMode === "blank") {
      // No route needed; force global after short delay
      setTimeout(function () { applyFor("blank"); }, 50);
      return;
    }

    // AUTO mode: wait until /v2/location/:id is visible (max ~10s)
    var t0 = Date.now();
    var timer = setInterval(function () {
      var id = getRouteId();
      if (id || Date.now() - t0 > 10000) {
        clearInterval(timer);
        applyFor(id || "blank");
      }
    }, 120);
  }

  if (document.readyState !== "loading") start();
  else document.addEventListener("DOMContentLoaded", start);
})();
