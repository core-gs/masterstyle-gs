//https://cdn.jsdelivr.net/gh/core-gs/masterstyle-gs@latest/v9-ghl-loader.min.js
//https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css

// GHL Loader (SPA-aware, fast apply with cache + guard)
// - Instant inline apply of stable theme via localStorage cache
// - Then fetch latest, inject blob, and replace inline
// - Promotes matching per-ID dynamic CSS; cleans up on route switch
// - Adds loc-<id> on <html> and raw-id containers (and watches for late mounts)
// - Minimizes FOUC with a small guard CSS (auto-removed; failsafe 3s)

(function () {
  if (window.__GHL_LOADER__) return;
  window.__GHL_LOADER__ = true;

  var DEFAULT_TEMPLATE_URL = "https://cdn.jsdelivr.net/gh/ghlstyle/d-theme@latest/user-d-custom-theme.css";
  var GUARD_TIMEOUT_MS = 3000;     // max hide time
  var WATCH_SCOPE_MS   = 15000;    // watch duration for late mounts
  var ROUTE_WAIT_MS    = 10000;    // initial wait for id
  var STORAGE_KEY = "GHL_THEME_CACHE::"; // localStorage prefix

  var STATE = {
    currentKey: null,
    lastHref: location.href,
    ensureWatchers: {},
    guardEl: null,
    appliedKeySet: new Set(), // to avoid double inline inject
  };

  // ---------- Utils ----------
  function currentScript() {
    return document.currentScript || (function () {
      var s = document.getElementsByTagName("script");
      return s[s.length - 1] || null;
    })();
  }
  function getRouteId() {
    var m = location.href.match(/\/v2\/location\/([^\/\?#]+)/);
    return m ? m[1] : null;
  }
  function scopeClass(id) { return "loc-" + id; }
  function cacheKey(templateURL, key) { return STORAGE_KEY + templateURL + "::" + key; }

  // ---------- Guard (minimize flash) ----------
  function installGuard() {
    if (STATE.guardEl) return;
    // very small CSS to hide only chrome areas until themed
    var css =
      'html:not(.ghl-applied) .hl_header, html:not(.ghl-applied) #sidebar-v2{visibility:hidden !important}' +
      'html:not(.ghl-applied) #dashboard-wrapper{opacity:0.001 !important}';
    var st = document.createElement("style");
    st.setAttribute("data-ghl-guard", "true");
    st.textContent = css;
    document.head.appendChild(st);
    STATE.guardEl = st;

    // Failsafe remove
    setTimeout(removeGuard, GUARD_TIMEOUT_MS);
  }
  function removeGuard() {
    if (STATE.guardEl && STATE.guardEl.parentNode) {
      STATE.guardEl.parentNode.removeChild(STATE.guardEl);
    }
    STATE.guardEl = null;
    document.documentElement.classList.add("ghl-applied");
  }
  function markAppliedSoon() {
    // small delay so both stable+dynamic land before reveal
    setTimeout(removeGuard, 30);
  }

  // ---------- Preconnect / priority ----------
  function boostFetchPriority() {
    try {
      // Preconnect to jsDelivr
      var pc = document.createElement("link");
      pc.rel = "preconnect";
      pc.href = "https://cdn.jsdelivr.net";
      document.head.appendChild(pc);
    } catch(_) {}

    try {
      var links = document.querySelectorAll('link[data-ghl-id]');
      links.forEach(function (n) {
        if (!n.getAttribute("fetchpriority")) n.setAttribute("fetchpriority", "high");
        // ensure rel=preload as style
        if (n.rel !== "preload") { n.rel = "preload"; n.as = "style"; }
      });
    } catch(_) {}
  }

  // ---------- Scope classes ----------
  function attachScopeClasses(id) {
    if (!id || id === "blank") return;
    var cls = scopeClass(id);
    document.documentElement.classList.add(cls);
    try {
      var nodes = document.getElementsByClassName(id);
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (node.classList && !node.classList.contains(cls)) node.classList.add(cls);
      }
    } catch (_) {}
  }
  function detachScopeClasses(id) {
    if (!id || id === "blank") return;
    var cls = scopeClass(id);
    document.documentElement.classList.remove(cls);
    try {
      var list = document.getElementsByClassName(cls), arr = [];
      for (var i = 0; i < list.length; i++) arr.push(list[i]);
      for (var j = 0; j < arr.length; j++) arr[j].classList.remove(cls);
    } catch (_) {}
  }
  function watchAndEnsureScope(id) {
    if (!id || id === "blank") return;
    if (STATE.ensureWatchers[id]) return;
    var cls = scopeClass(id);
    var start = Date.now();

    attachScopeClasses(id);

    var mo = new MutationObserver(function (muts) {
      for (var k = 0; k < muts.length; k++) {
        var m = muts[k];
        if (m.type === "childList") {
          for (var j = 0; j < m.addedNodes.length; j++) {
            var n = m.addedNodes[j];
            if (n && n.nodeType === 1) {
              if (n.classList && n.classList.contains(id) && !n.classList.contains(cls)) n.classList.add(cls);
              if (n.getElementsByClassName) {
                var list = n.getElementsByClassName(id);
                for (var x = 0; x < list.length; x++) {
                  var el = list[x];
                  if (el.classList && !el.classList.contains(cls)) el.classList.add(cls);
                }
              }
            }
          }
        }
        if (m.type === "attributes" && m.attributeName === "class") {
          var el2 = m.target;
          if (el2 && el2.classList && el2.classList.contains(id) && !el2.classList.contains(cls)) el2.classList.add(cls);
        }
      }
      if (Date.now() - start > WATCH_SCOPE_MS) {
        try { mo.disconnect(); } catch (_) {}
        delete STATE.ensureWatchers[id];
      }
    });

    try {
      mo.observe(document.documentElement, { subtree: true, childList: true, attributes: true, attributeFilter: ["class"] });
      STATE.ensureWatchers[id] = mo;
    } catch(_) {}
  }

  // ---------- Manual list helpers ----------
  function findExactEntry(id) { return id ? document.querySelector('link[data-ghl-id="' + id + '"]') : null; }
  function findBlankEntry()   { return document.querySelector('link[data-ghl-id="blank"]'); }

  // ---------- Dynamic stylesheet promotion / cleanup ----------
  function promotePreload(entry, key) {
    if (!entry) return null;
    var href = entry.getAttribute("href");
    if (!href) return null;
    var existing = document.querySelector('link[rel="stylesheet"][data-ghl-style-for="'+ key +'"]');
    if (existing && existing.getAttribute('href') === href) return existing;

    cleanupPromotedStylesExcept(null); // remove all to avoid conflicts

    var l = document.createElement("link");
    l.rel = "stylesheet";
    l.href = href;
    l.setAttribute("data-ghl-style-for", key);
    l.onload = markAppliedSoon;
    document.head.appendChild(l);
    entry.setAttribute("data-activated", "true");
    return l;
  }
  function cleanupPromotedStylesExcept(keepKey) {
    var promoted = document.querySelectorAll('link[rel="stylesheet"][data-ghl-style-for]');
    for (var i = 0; i < promoted.length; i++) {
      var n = promoted[i];
      if (!keepKey || n.getAttribute("data-ghl-style-for") !== keepKey) {
        n.parentNode && n.parentNode.removeChild(n);
      }
    }
  }

  // ---------- Stable theme: cache-first inline, then network replace ----------
  function injectInlineStable(key, css) {
    if (STATE.appliedKeySet.has(key)) return; // already inlined
    var st = document.createElement("style");
    st.type = "text/css";
    st.setAttribute("data-user-theme-inline", key);
    st.textContent = css;
    document.head.appendChild(st);
    STATE.appliedKeySet.add(key);
    // mark guard removal soon (dynamic will also trigger)
    markAppliedSoon();
  }
  function removeInlineStableNotKey(keepKey) {
    var list = document.querySelectorAll('style[data-user-theme-inline]');
    for (var i = 0; i < list.length; i++) {
      var n = list[i];
      if (n.getAttribute("data-user-theme-inline") !== keepKey) {
        n.parentNode && n.parentNode.removeChild(n);
      }
    }
  }

  function loadStableThemeFast(key, templateURL) {
    var storageId = cacheKey(templateURL, key);
    // Try cache first
    try {
      var cached = localStorage.getItem(storageId);
      if (cached) {
        injectInlineStable(key, cached);
      }
    } catch(_) {}

    // If a blob link already exists for this key, skip network fetch
    if (document.querySelector('link[data-user-theme-loaded="' + key + '"]')) return;

    // Fetch latest and replace inline with blob
    fetch(templateURL, { cache: "default", mode: "cors" })
      .then(function (r) {
        if (!r.ok) throw new Error("template fetch " + r.status);
        return r.text();
      })
      .then(function (css) {
        var processed = (key === "blank")
          ? css.replace(/\.?__USER__\b/g, "")
          : css.replace(/\.?__USER__\b/g, "." + scopeClass(key));

        // Cache processed CSS
        try { localStorage.setItem(storageId, processed); } catch(_) {}

        // Inject blob link (preferred long-term)
        var blob = new Blob([processed], { type: "text/css" });
        var href = URL.createObjectURL(blob);
        var link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = href;
        link.setAttribute("data-user-theme-loaded", key);
        link.onload = markAppliedSoon;
        document.head.appendChild(link);

        link.addEventListener("load", function () {
          setTimeout(function () {
            try { URL.revokeObjectURL(href); } catch (e) {}
            // Remove inline copy once blob is active
            removeInlineStableNotKey(key);
          }, 300);
        });
      })
      .catch(function (err) {
        console.warn("[GHL Loader] Stable theme template fetch failed:", err && err.message);
      });
  }

  // ---------- Apply / Swap ----------
  function applyWithKey(key) {
    var entry = key === "blank" ? findBlankEntry() : findExactEntry(key);
    if (!entry) return false;

    if (STATE.currentKey === key) {
      attachScopeClasses(key);
      watchAndEnsureScope(key);
      return true;
    }

    // Clean previous
    var prev = STATE.currentKey;
    if (prev && prev !== key) {
      detachScopeClasses(prev);
      cleanupPromotedStylesExcept(null);
      removeInlineStableNotKey(key);
      // remove all previous blob themes
      var themes = document.querySelectorAll('link[data-user-theme-loaded]');
      themes.forEach(function (t) { t.parentNode && t.parentNode.removeChild(t); });
    }

    // Guard to prevent flash
    installGuard();

    // New apply
    attachScopeClasses(key);
    watchAndEnsureScope(key);

    var cs = currentScript();
    var templateURL = (cs && cs.getAttribute("data-template")) || DEFAULT_TEMPLATE_URL;

    boostFetchPriority();
    loadStableThemeFast(key, templateURL);
    promotePreload(entry, key);

    STATE.currentKey = key;
    return true;
  }

  function chooseAndApplyForCurrentRoute() {
    var id = getRouteId();
    if (id) {
      if (!applyWithKey(id)) applyWithKey("blank");
    } else {
      applyWithKey("blank");
    }
  }

  // ---------- SPA route detection ----------
  function installRouteWatchers() {
    var _push = history.pushState, _replace = history.replaceState;
    function handleUrlChange() {
      if (STATE.lastHref !== location.href) {
        STATE.lastHref = location.href;
        setTimeout(chooseAndApplyForCurrentRoute, 30);
      }
    }
    try {
      history.pushState = function () { var r = _push.apply(this, arguments); handleUrlChange(); return r; };
      history.replaceState = function () { var r = _replace.apply(this, arguments); handleUrlChange(); return r; };
    } catch(_) {}
    window.addEventListener('popstate', handleUrlChange);
    setInterval(handleUrlChange, 300);
  }

  // ---------- Boot ----------
  function start() {
    installRouteWatchers();
    boostFetchPriority();

    var t0 = Date.now();
    var timer = setInterval(function () {
      var id = getRouteId();
      if (id || Date.now() - t0 > ROUTE_WAIT_MS) {
        clearInterval(timer);
        chooseAndApplyForCurrentRoute();
      }
    }, 80);
  }

  if (document.readyState !== "loading") start();
  else document.addEventListener("DOMContentLoaded", start);
})();
